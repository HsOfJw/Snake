{"version":3,"sources":["MoveLogic.js"],"names":["MoveDirection","require","SnakeDirection","Util","MoveLogic","cc","Class","extends","Component","isMoving","snakeNode","stoneNode","winActionState","isWin","winDirection","ctor","reset","init","self","Game","EventCenter","RegisterEvent","uuid","MessageType","Snake_Move_Finish","moveFinish","onDestroy","RemoveEvent","moveLogic","moveDirection","snakeHeadGid","getHeadCurGID","snakeHeadNextGid","MapUtil","GetNextGID","bodySectionNum","bodyNode","getSectionNum","gidArray","push","index","sectionGID","getSectionGID","headNode","setNextGID","setSectionNextGID","tailNode","GetDoorGID","snakeHeadNextDir","snakeHeadDir","getDirection","dirArr","dir","getSectionDirection","setDirection","tempPreDir","tempCurDir","SD_Up","SD_Right","SD_Left_Up","SD_Right_Down","SD_Down","SD_Left_Down","SD_Left","SD_Right_Up","setSectionDirectioin","setMyChangedDirtyFlag","allStoneNode","GetAllStoneNode","i","length","stone","gid","stoneNextGID","nextGID","DispatchEvent","Update_Game_Object_ZIndex","rotateLogic","direction","log","GAME_WIN","isCanMove","isNotMoveLogic","curGID","terrainGidVec","GetMapTerrainGID","dropComponent","droping","IsContainElement","bodyLength","bodyGID","tailGID","getGID","allStoneGID","GetAllStoneGID","nextNetGID","IsNull","isNotMove","isVertical","MD_Left","MD_Right","MD_Down","module","exports"],"mappings":";;;;;;AAAA,IAAIA,gBAAgBC,QAAQ,aAAR,EAAuBD,aAA3C;AACA,IAAIE,iBAAiBD,QAAQ,aAAR,EAAuBC,cAA5C;AACA,IAAIC,OAAOF,QAAQ,MAAR,CAAX;;AAEA,IAAIG,YAAYC,GAAGC,KAAH,CAAS;;AAErBC,aAASF,GAAGG,SAFS;;AAIrBC,cAAgB,IAJK;AAKrBC,eAAgB,IALK;AAMrBC,eAAgB,IANK;AAOrBC,oBAAgB,IAPK;AAQrBC,WAAgB,IARK;AASrBC,kBAAgB,IATK;;AAWrBC,QAXqB,kBAWf;AACF,aAAKC,KAAL;AACH,KAboB;AAerBC,QAfqB,kBAef;AACF,YAAIC,OAAO,IAAX;;AAEAC,aAAKC,WAAL,CAAiBC,aAAjB,CAA+B,KAAKC,IAApC,EAA0CH,KAAKI,WAAL,CAAiBC,iBAA3D,EAA8E,YAAU;AACpFN,iBAAKO,UAAL;AACH,SAFD;AAGH,KArBoB;AAuBrBC,aAvBqB,uBAuBV;AACP,aAAKV,KAAL;;AAEAG,aAAKC,WAAL,CAAiBO,WAAjB,CAA6B,KAAKL,IAAlC;AACH,KA3BoB;AA6BrBN,SA7BqB,mBA6Bd;AACH,aAAKP,QAAL,GAAgB,KAAhB;AACA,aAAKE,SAAL,GAAiB,IAAjB;AACA,aAAKD,SAAL,GAAiB,IAAjB;AACA,aAAKG,KAAL,GAAa,KAAb;AACA,aAAKD,cAAL,GAAsB,CAAtB;AACA,aAAKE,YAAL,GAAoB,CAApB;AACH,KApCoB;AAsCrBc,aAtCqB,qBAsCXC,aAtCW,EAsCG;AACpB,aAAKpB,QAAL,GAAgB,IAAhB;;AAEA,YAAIC,YAAY,KAAKA,SAArB;;AAEA;AACA,YAAIoB,eAAepB,UAAUqB,aAAV,EAAnB;AACA,YAAIC,mBAAmBb,KAAKc,OAAL,CAAaC,UAAb,CAAwBL,aAAxB,EAAuCC,YAAvC,CAAvB;;AAEA,YAAIK,iBAAiBzB,UAAU0B,QAAV,CAAmBC,aAAnB,EAArB;AACA,YAAIC,WAAW,EAAf;AACAA,iBAASC,IAAT,CAAcT,YAAd;AACA,YAAIU,KAAJ;;AAEA,aAAIA,QAAQ,CAAZ,EAAcA,QAAQL,cAAtB,EAAsCK,OAAtC,EAA+C;AAC3C,gBAAIC,aAAa/B,UAAU0B,QAAV,CAAmBM,aAAnB,CAAiCF,KAAjC,CAAjB;AACAF,qBAASC,IAAT,CAAcE,UAAd;AACH;;AAED/B,kBAAUiC,QAAV,CAAmBC,UAAnB,CAA8BZ,gBAA9B;AACA,aAAIQ,QAAQ,CAAZ,EAAcA,QAAQL,cAAtB,EAAsCK,OAAtC,EAA+C;AAC3C9B,sBAAU0B,QAAV,CAAmBS,iBAAnB,CAAqCL,KAArC,EAA4CF,SAASE,KAAT,CAA5C;AACH;AACD9B,kBAAUoC,QAAV,CAAmBF,UAAnB,CAA8BN,SAASE,KAAT,CAA9B;;AAEA,YAAG,KAAK3B,KAAL,IAAcyB,SAASE,KAAT,KAAmBrB,KAAKc,OAAL,CAAac,UAAb,EAApC,EAA8D;AAC1D,iBAAKnC,cAAL,GAAsB,CAAtB;AACH;AACD;;AAIA;AACA,YAAIoC,mBAAmBnB,aAAvB;AACA,YAAIoB,eAAevC,UAAUiC,QAAV,CAAmBO,YAAnB,EAAnB;AACA,YAAIC,SAAS,EAAb;AACAA,eAAOZ,IAAP,CAAYU,YAAZ;AACA,aAAIT,QAAQ,CAAZ,EAAcA,QAAQL,cAAtB,EAAsCK,OAAtC,EAA+C;AAC3C,gBAAIY,MAAM1C,UAAU0B,QAAV,CAAmBiB,mBAAnB,CAAuCb,KAAvC,CAAV;AACAW,mBAAOZ,IAAP,CAAYa,GAAZ;AACH;;AAGD1C,kBAAUiC,QAAV,CAAmBW,YAAnB,CAAgCN,gBAAhC;AACA,YAAIO,aAAaP,gBAAjB;AACA,aAAIR,QAAQ,CAAZ,EAAcA,QAAQL,cAAtB,EAAsCK,OAAtC,EAA+C;AAC3C,gBAAIgB,aAAaL,OAAOX,KAAP,CAAjB;AACA,gBAAGe,cAAcrD,eAAeuD,KAA7B,IAAsCD,cAActD,eAAewD,QAAtE,EAA+E;AAC3EF,6BAAatD,eAAeyD,UAA5B;AACH,aAFD,MAEM,IAAGJ,cAAcrD,eAAewD,QAA7B,IAAyCF,cAActD,eAAeuD,KAAzE,EAA+E;AACjFD,6BAAatD,eAAe0D,aAA5B;AACH,aAFK,MAEA,IAAGL,cAAcrD,eAAe2D,OAA7B,IAAwCL,cAActD,eAAewD,QAAxE,EAAiF;AACnFF,6BAAatD,eAAe4D,YAA5B;AACH,aAFK,MAEA,IAAGP,cAAcrD,eAAe6D,OAA7B,IAAwCP,cAActD,eAAe2D,OAAxE,EAAgF;AAClFL,6BAAatD,eAAeyD,UAA5B;AACH,aAFK,MAEA,IAAGJ,cAAcrD,eAAeuD,KAA7B,IAAsCD,cAActD,eAAe6D,OAAtE,EAA8E;AAChFP,6BAAatD,eAAe8D,WAA5B;AACH,aAFK,MAEA,IAAGT,cAAcrD,eAAe6D,OAA7B,IAAyCP,cAActD,eAAeuD,KAAzE,EAA+E;AACjFD,6BAAatD,eAAe4D,YAA5B;AACH,aAFK,MAEA,IAAGP,cAAcrD,eAAewD,QAA7B,IAA0CF,cAActD,eAAe2D,OAA1E,EAAkF;AACpFL,6BAAatD,eAAe8D,WAA5B;AACH,aAFK,MAEA,IAAGT,cAAcrD,eAAe2D,OAA7B,IAAyCL,cAActD,eAAe6D,OAAzE,EAAiF;AACnFP,6BAAatD,eAAe0D,aAA5B;AACH;AACDL,yBAAaC,UAAb;AACA9C,sBAAU0B,QAAV,CAAmB6B,oBAAnB,CAAwCzB,KAAxC,EAA+CgB,UAA/C;AACH;;AAED,YAAIA,aAAaL,OAAOX,KAAP,CAAjB;AACA,YAAGgB,cAActD,eAAeyD,UAA7B,IAA2CJ,cAAcrD,eAAeuD,KAA3E,EAAiF;AAC7ED,yBAAatD,eAAeuD,KAA5B;AACH,SAFD,MAEM,IAAGD,cAActD,eAAe0D,aAAhC,EAA8C;AAChDJ,yBAAatD,eAAewD,QAA5B;AACH,SAFK,MAEA,IAAGF,cAActD,eAAe4D,YAAhC,EAA6C;AAC/CN,yBAAatD,eAAe2D,OAA5B;AACH,SAFK,MAEA,IAAGL,cAActD,eAAeyD,UAA7B,IAA2CJ,cAAcrD,eAAe6D,OAA3E,EAAmF;AACrFP,yBAAatD,eAAe6D,OAA5B;AACH;AACDrD,kBAAUoC,QAAV,CAAmBQ,YAAnB,CAAgCE,UAAhC;;AAGA;AACA9C,kBAAUwD,qBAAV,CAAgC,IAAhC;AACA;;AAGA;AACA,YAAIC,eAAe,KAAKxD,SAAL,CAAeyD,eAAf,EAAnB;AACA,aAAI,IAAIC,IAAI,CAAZ,EAAcA,IAAIF,aAAaG,MAA/B,EAAsCD,GAAtC,EAA2C;AACvC,gBAAIE,QAAQJ,aAAaE,CAAb,CAAZ;AACA,gBAAGE,SAASA,MAAMC,GAAN,IAAaxC,gBAAzB,EAA0C;AACtC,oBAAIyC,eAAetD,KAAKc,OAAL,CAAaC,UAAb,CAAwBL,aAAxB,EAAuCG,gBAAvC,CAAnB;AACAuC,sBAAMG,OAAN,GAAgBD,YAAhB;AACAF,sBAAML,qBAAN,CAA4B,IAA5B;AACA;AACH;AACJ;AACD;;AAEA/C,aAAKC,WAAL,CAAiBuD,aAAjB,CAA+BxD,KAAKI,WAAL,CAAiBqD,yBAAhD;AACH,KA1IoB;AA4IrBC,eA5IqB,uBA4ITC,SA5IS,EA4IC,CAErB,CA9IoB;AAgJrBrD,cAhJqB,wBAgJT;AACR,YAAIP,OAAO,IAAX;;AAEA,YAAGA,KAAKL,KAAR,EAAc;AACV,gBAAGK,KAAKN,cAAL,IAAuB,CAA1B,EAA4B;AACxBM,qBAAKU,SAAL,CAAeV,KAAKJ,YAApB;AACH,aAFD,MAEM,IAAGI,KAAKN,cAAL,IAAuB,CAA1B,EAA4B;AAC9BM,qBAAKU,SAAL,CAAeV,KAAKJ,YAApB;AACAI,qBAAKN,cAAL,GAAsB,CAAtB;AACH,aAHK,MAGA,IAAGM,KAAKN,cAAL,IAAuB,CAA1B,EAA4B;AAC9B;AACAP,mBAAG0E,GAAH,CAAO,WAAP;AACA5D,qBAAKC,WAAL,CAAiBuD,aAAjB,CAA+BxD,KAAKI,WAAL,CAAiByD,QAAhD;AACH;AACJ;;AAED9D,aAAKT,QAAL,GAAgB,KAAhB;AACH,KAjKoB;;;AAmKrB;AACAwE,aApKqB,qBAoKXpD,aApKW,EAoKIqD,cApKJ,EAoKmB;AACpC,YAAG,KAAKzE,QAAL,IAAiB,CAAC,KAAKC,SAAvB,IAAoC,KAAKG,KAA5C,EAAmD,OAAO,KAAP;;AAEnD,YAAIH,YAAY,KAAKA,SAArB;;AAEA,YAAIyE,SAASzE,UAAUqB,aAAV,EAAb;AACA,YAAI2C,UAAUvD,KAAKc,OAAL,CAAaC,UAAb,CAAwBL,aAAxB,EAAuCsD,MAAvC,CAAd;;AAEA,YAAIC,gBAAgBjE,KAAKc,OAAL,CAAaoD,gBAAb,EAApB;;AAEA,YAAG,CAACH,cAAJ,EAAmB;AACf,gBAAGxE,UAAU4E,aAAV,CAAwBC,OAA3B,EAAmC;AAC/B,uBAAO,KAAP;AACH;AACJ;;AAED,YAAGpF,KAAKqF,gBAAL,CAAsBJ,aAAtB,EAAqCV,OAArC,CAAH,EAAiD;AAC7C,mBAAO,KAAP;AACH;;AAED,aAAI,IAAIL,IAAI,CAAZ,EAAeA,IAAI3D,UAAU0B,QAAV,CAAmBqD,UAAtC,EAAkDpB,GAAlD,EAAsD;AAClD,gBAAIqB,UAAUhF,UAAU0B,QAAV,CAAmBM,aAAnB,CAAiC2B,CAAjC,CAAd;AACA,gBAAGK,WAAWgB,OAAd,EAAsB;AAClB,uBAAO,KAAP;AACH;AACJ;AACD,YAAIC,UAAUjF,UAAUoC,QAAV,CAAmB8C,MAAnB,EAAd;AACA,YAAGD,WAAWjB,OAAd,EAAsB;AAClB,mBAAO,KAAP;AACH;;AAED,YAAImB,cAAc1E,KAAKc,OAAL,CAAa6D,cAAb,EAAlB;AACA,YAAG3F,KAAKqF,gBAAL,CAAsBK,WAAtB,EAAmCnB,OAAnC,CAAH,EAA+C;AAC3C,gBAAIqB,aAAa5E,KAAKc,OAAL,CAAaC,UAAb,CAAwBL,aAAxB,EAAuC6C,OAAvC,CAAjB;AACA,gBAAGvD,KAAKc,OAAL,CAAa+D,MAAb,CAAoBD,UAApB,KAAmC,KAAnC,IAA4C5F,KAAKqF,gBAAL,CAAsBJ,aAAtB,EAAqCW,UAArC,CAA/C,EAAgG;AAC5F,uBAAO,KAAP;AACH;AACJ;;AAED,eAAO,IAAP;AACH,KA5MoB;;;AA8MrB;AACAE,aA/MqB,uBA+MV;AACP,YAAG,KAAKvF,SAAL,CAAe4E,aAAf,CAA6BC,OAAhC,EAAwC;AACpC,mBAAO,KAAP;AACH;;AAED,YAAG,KAAK7E,SAAL,CAAewF,UAAf,EAAH,EAA+B;AAC3B,gBAAG,KAAKjB,SAAL,CAAejF,cAAcmG,OAA7B,EAAsC,IAAtC,KAA+C,KAAKlB,SAAL,CAAejF,cAAcoG,QAA7B,EAAuC,IAAvC,CAAlD,EAA+F;AAC3F,uBAAO,KAAP;AACH,aAFD,MAEK;AACD,uBAAO,IAAP;AACH;AACJ;;AAED,aAAI,IAAI/B,IAAIrE,cAAcmG,OAA1B,EAAmC9B,KAAKrE,cAAcqG,OAAtD,EAA+DhC,GAA/D,EAAoE;AAChE,gBAAG,KAAKY,SAAL,CAAeZ,CAAf,EAAkB,IAAlB,CAAH,EAA2B;AACvB,uBAAO,KAAP;AACH;AACJ;;AAED,eAAO,IAAP;AACH;AAnOoB,CAAT,CAAhB;;AAsOAiC,OAAOC,OAAP,GAAiBnG,SAAjB","file":"MoveLogic.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["var MoveDirection = require('ConstDefine').MoveDirection;\r\nvar SnakeDirection = require('ConstDefine').SnakeDirection;\r\nvar Util = require('Util');\r\n\r\nvar MoveLogic = cc.Class({\r\n\r\n    extends: cc.Component,\r\n\r\n    isMoving:       null,\r\n    snakeNode:      null,\r\n    stoneNode:      null,\r\n    winActionState: null,\r\n    isWin:          null,\r\n    winDirection:   null,\r\n\r\n    ctor(){\r\n        this.reset();\r\n    },\r\n\r\n    init(){\r\n        var self = this;\r\n\r\n        Game.EventCenter.RegisterEvent(this.uuid, Game.MessageType.Snake_Move_Finish, function(){\r\n            self.moveFinish();\r\n        });\r\n    },\r\n\r\n    onDestroy(){\r\n        this.reset();\r\n\r\n        Game.EventCenter.RemoveEvent(this.uuid);\r\n    },\r\n\r\n    reset(){\r\n        this.isMoving = false;\r\n        this.stoneNode = null;\r\n        this.snakeNode = null;\r\n        this.isWin = false;\r\n        this.winActionState = 0;\r\n        this.winDirection = 0;\r\n    },\r\n\r\n    moveLogic(moveDirection){\r\n        this.isMoving = true;\r\n\r\n        var snakeNode = this.snakeNode;\r\n\r\n        /************计算位置******************/\r\n        var snakeHeadGid = snakeNode.getHeadCurGID();\r\n        var snakeHeadNextGid = Game.MapUtil.GetNextGID(moveDirection, snakeHeadGid);\r\n\r\n        var bodySectionNum = snakeNode.bodyNode.getSectionNum();\r\n        var gidArray = [];\r\n        gidArray.push(snakeHeadGid);\r\n        var index;\r\n\r\n        for(index = 0;index < bodySectionNum; index ++){\r\n            var sectionGID = snakeNode.bodyNode.getSectionGID(index);\r\n            gidArray.push(sectionGID);\r\n        }\r\n\r\n        snakeNode.headNode.setNextGID(snakeHeadNextGid);\r\n        for(index = 0;index < bodySectionNum; index ++){\r\n            snakeNode.bodyNode.setSectionNextGID(index, gidArray[index]);\r\n        }\r\n        snakeNode.tailNode.setNextGID(gidArray[index]);\r\n        \r\n        if(this.isWin && gidArray[index] == Game.MapUtil.GetDoorGID()){\r\n            this.winActionState = 1;\r\n        }\r\n        /**********************************/\r\n\r\n\r\n\r\n        /************计算指向******************/\r\n        var snakeHeadNextDir = moveDirection;\r\n        var snakeHeadDir = snakeNode.headNode.getDirection();\r\n        var dirArr = [];\r\n        dirArr.push(snakeHeadDir);\r\n        for(index = 0;index < bodySectionNum; index ++){\r\n            var dir = snakeNode.bodyNode.getSectionDirection(index);\r\n            dirArr.push(dir);\r\n        }\r\n\r\n\r\n        snakeNode.headNode.setDirection(snakeHeadNextDir);\r\n        var tempPreDir = snakeHeadNextDir;\r\n        for(index = 0;index < bodySectionNum; index ++){\r\n            var tempCurDir = dirArr[index];\r\n            if(tempPreDir == SnakeDirection.SD_Up && tempCurDir == SnakeDirection.SD_Right){\r\n                tempCurDir = SnakeDirection.SD_Left_Up;\r\n            }else if(tempPreDir == SnakeDirection.SD_Right && tempCurDir == SnakeDirection.SD_Up){\r\n                tempCurDir = SnakeDirection.SD_Right_Down;\r\n            }else if(tempPreDir == SnakeDirection.SD_Down && tempCurDir == SnakeDirection.SD_Right){\r\n                tempCurDir = SnakeDirection.SD_Left_Down;\r\n            }else if(tempPreDir == SnakeDirection.SD_Left && tempCurDir == SnakeDirection.SD_Down){\r\n                tempCurDir = SnakeDirection.SD_Left_Up;\r\n            }else if(tempPreDir == SnakeDirection.SD_Up && tempCurDir == SnakeDirection.SD_Left){\r\n                tempCurDir = SnakeDirection.SD_Right_Up;\r\n            }else if(tempPreDir == SnakeDirection.SD_Left &&  tempCurDir == SnakeDirection.SD_Up){\r\n                tempCurDir = SnakeDirection.SD_Left_Down;\r\n            }else if(tempPreDir == SnakeDirection.SD_Right &&  tempCurDir == SnakeDirection.SD_Down){\r\n                tempCurDir = SnakeDirection.SD_Right_Up;\r\n            }else if(tempPreDir == SnakeDirection.SD_Down &&  tempCurDir == SnakeDirection.SD_Left){\r\n                tempCurDir = SnakeDirection.SD_Right_Down;\r\n            }\r\n            tempPreDir = tempCurDir;\r\n            snakeNode.bodyNode.setSectionDirectioin(index, tempCurDir);\r\n        }\r\n\r\n        var tempCurDir = dirArr[index];\r\n        if(tempCurDir == SnakeDirection.SD_Left_Up && tempPreDir == SnakeDirection.SD_Up){\r\n            tempCurDir = SnakeDirection.SD_Up;\r\n        }else if(tempCurDir == SnakeDirection.SD_Right_Down){\r\n            tempCurDir = SnakeDirection.SD_Right;\r\n        }else if(tempCurDir == SnakeDirection.SD_Left_Down){\r\n            tempCurDir = SnakeDirection.SD_Down;\r\n        }else if(tempCurDir == SnakeDirection.SD_Left_Up && tempPreDir == SnakeDirection.SD_Left){\r\n            tempCurDir = SnakeDirection.SD_Left;    \r\n        }\r\n        snakeNode.tailNode.setDirection(tempCurDir);\r\n\r\n\r\n        //开始移动\r\n        snakeNode.setMyChangedDirtyFlag(true);\r\n        /**********************************/\r\n\r\n\r\n        //石头移动逻辑\r\n        var allStoneNode = this.stoneNode.GetAllStoneNode();\r\n        for(var i = 0;i < allStoneNode.length;i ++){\r\n            var stone = allStoneNode[i];\r\n            if(stone && stone.gid == snakeHeadNextGid){\r\n                var stoneNextGID = Game.MapUtil.GetNextGID(moveDirection, snakeHeadNextGid);\r\n                stone.nextGID = stoneNextGID;\r\n                stone.setMyChangedDirtyFlag(true);\r\n                break;\r\n            }\r\n        }\r\n        //////////////////////////////\r\n\r\n        Game.EventCenter.DispatchEvent(Game.MessageType.Update_Game_Object_ZIndex);\r\n    },\r\n\r\n    rotateLogic(direction){\r\n\r\n    },\r\n\r\n    moveFinish(){\r\n        var self = this;\r\n\r\n        if(self.isWin){\r\n            if(self.winActionState == 0){\r\n                self.moveLogic(self.winDirection);\r\n            }else if(self.winActionState == 1){\r\n                self.moveLogic(self.winDirection);\r\n                self.winActionState = 2;\r\n            }else if(self.winActionState == 2){\r\n                //结束\r\n                cc.log(\"game over\");\r\n                Game.EventCenter.DispatchEvent(Game.MessageType.GAME_WIN);\r\n            }\r\n        }\r\n\r\n        self.isMoving = false;\r\n    },\r\n\r\n    //指定一个方向，判断是否可以移动\r\n    isCanMove(moveDirection, isNotMoveLogic){\r\n        if(this.isMoving || !this.snakeNode || this.isWin) return false;\r\n\r\n        var snakeNode = this.snakeNode;\r\n\r\n        var curGID = snakeNode.getHeadCurGID();\r\n        var nextGID = Game.MapUtil.GetNextGID(moveDirection, curGID);\r\n\r\n        var terrainGidVec = Game.MapUtil.GetMapTerrainGID();\r\n\r\n        if(!isNotMoveLogic){\r\n            if(snakeNode.dropComponent.droping){\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if(Util.IsContainElement(terrainGidVec, nextGID)){\r\n            return false;\r\n        }\r\n\r\n        for(var i = 0; i < snakeNode.bodyNode.bodyLength; i++){\r\n            var bodyGID = snakeNode.bodyNode.getSectionGID(i);\r\n            if(nextGID == bodyGID){\r\n                return false;\r\n            }\r\n        }\r\n        var tailGID = snakeNode.tailNode.getGID();\r\n        if(tailGID == nextGID){\r\n            return false;\r\n        }\r\n\r\n        var allStoneGID = Game.MapUtil.GetAllStoneGID();\r\n        if(Util.IsContainElement(allStoneGID, nextGID)){\r\n            var nextNetGID = Game.MapUtil.GetNextGID(moveDirection, nextGID);\r\n            if(Game.MapUtil.IsNull(nextNetGID) == false || Util.IsContainElement(terrainGidVec, nextNetGID)){\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    },\r\n\r\n    //是否不能动了\r\n    isNotMove(){\r\n        if(this.snakeNode.dropComponent.droping){\r\n            return false;\r\n        }\r\n        \r\n        if(this.snakeNode.isVertical()){\r\n            if(this.isCanMove(MoveDirection.MD_Left, true) || this.isCanMove(MoveDirection.MD_Right, true)){\r\n                return false;\r\n            }else{\r\n                return true;\r\n            }\r\n        }\r\n\r\n        for(var i = MoveDirection.MD_Left; i <= MoveDirection.MD_Down; i ++){\r\n            if(this.isCanMove(i, true)){\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n});\r\n\r\nmodule.exports = MoveLogic;\r\n"]}